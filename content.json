{"meta":{"title":"得閒飲茶","subtitle":"Take it easy","description":"Just another BB world","author":"Lor-My-Guy","url":"https://julianblog.com","root":"/"},"pages":[{"title":"About me","date":"2020-03-06T03:31:27.000Z","updated":"2020-07-15T15:59:28.750Z","comments":true,"path":"about/index.html","permalink":"https://julianblog.com/about/index.html","excerpt":"","text":"ブログ再開するぞ！を言い張って（自分に）もうはや10年経つ（まじか…）。 中学時代、日本留学する前の大学では結構ブログを書いてたりして、友たちとのやり取りも多かったし、自分の知識や生活をブログ中心に整理して行けるので、やはりもう一回ちゃんとしたい。 過去にも何回かやってみたけど、やはり自分の完璧主義がめっちゃ邪魔しにくるので、途中で諦めたりしてだらだらしてたらもう…Time flies! はい、無駄話はここまで。 やはり前から結構かっこいいと思ってたのが Github Pages + Hexoという組み合わせ。Markdown で記事かけるし、サーバも無料。かんたんなコマンドで運用できる。最初の環境構築は割りと大変なのが鬼門で、（前の失敗はすべてこの段階でめんどくさくなって諦めた）純粋にブログを書きたい人は素直に Wordpress のほうがおすすめかも。技術帝は無視して(ryNothing to talk about."}],"posts":[{"title":"Github + Hexo でブログのメモ(3)","slug":"github-hexo-notes-3","date":"2020-03-07T09:11:22.000Z","updated":"2020-07-16T13:43:56.470Z","comments":true,"path":"2020/03/07/github-hexo-notes-3/","link":"","permalink":"https://julianblog.com/2020/03/07/github-hexo-notes-3/","excerpt":"","text":"メモ(1)とメモ(2)で基本的にブログを書き始められるが、ここではフォントとか、引っかかったポイントなどをまとめる テーマの細かい設定カテゴリの階層カテゴリをグルーピングしたいときは、リストで記載すれば自動的に同じキーワードを階層でまとめてくれる。 例： post.md12345categories:- [Sports, Baseball]- [MLB, American League, Boston Red Sox]- [MLB, American League, New York Yankees]- Rivalries 詳細は公式マニュアル Font-matter を参照 ブログ記事の命名法ブログを引っ越したいとか、別の Framework を使いたいとき、SEO、コメントなどに影響したくないので、できるだけ記事のアドレスはそのままにしたい。 命名法は /year/month/day/title、例として https://example.com/2020/03/01/post-name のように、日付を年月日ごとに分けて、最後に記事の名前。 こうすることでアドレスはかぶりにくいし、見え方もすっきりする。 設定はブログフォルダの _config.yml でできる _config.yml12new_post_name: :year-:month-:day-:title.mdpermalink: :year/:month/:day/:title/ これで hexo new post のときにタイトルだけ入れれば自動的日付もつけてくれるし、生成されるリンクも年月日ごとに分かれる。 日本語フォント追加最初の設定だと中華フォントになるため、テーマの中身をいじって日本語フォントを追加。テーマによっては場所といじり方が違うので、ここでは Hueman というテーマを例に。 場所は themes/hueman/source/css/_variables.stylMac の日本語フォント Hiragino Kaku と Windows の日本語フォント Meiryo を追加個人的には Meiryo ui が好きなので優先順的には Meiryo UI を先にした。 _variables.styl1font-sans = \"Titillium Web\", \"Helvetica Neue\", Helvetica, Arial, 'Hiragino Kaku Gothic ProN', 'meiryo ui', meiryo, sans-serif Google Fonts を使う場合 あとあと考えたら、やっぱ環境によってフォントが違うのがいやで、Google Fonts を導入することにした。 Google Fonts のページ https://fonts.google.com/ にアクセスして、好きなフォントと太さを選択し、右側に出てくるサイドバーの「Embed」を選ぶことで、埋め込む css のコートと、利用する際の font-family 表記を生成してくれる。 ここでテーマの設定ファイルに二箇所をいじることが必要になってくる 読み込む用の記載をいれる場所 上の _variables.styl にそれを使うと記載 まずは /themes/hueman/layout/common/head.ejs に Google Fonts を読み込む記載を入れるデフォルトで入っていた titillium-web というフォントの記載があったのでそれを参考に head.ejs1&lt;%- css('https://fonts.googleapis.com/css?family=Noto+Sans+JP:400,700&amp;display=swap\" rel=\"stylesheet') %&gt; 次に上と同様に themes/hueman/source/css/_variables.styl に font-family の設定を追加 _variables.styl1font-sans = 'Noto Sans JP', '游ゴシック', YuGothic, 'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', Verdana, 'メイリオ', Meiryo, sans-serif スペースを節約のためにいらないデフォルトで入っていた source/libs/titillium-webも削除した CDNあとは使う写真をどこに保存しるかだね。普通に HEXO とレポジトリに入れても良いが、毎回 clone のとき多分絶対死ぬ。無料で使いやすくてあまり消えてしまう心配がない良い CDN っぽいものないかな… あった。jsDeliver がとってもすばらしい。使い方も簡単： 写真や js/css など CDN で配布したいものを入れる用の Github レポジトリ作成 ファイルを master ブランチにアップロード（Web 経由で OK） あとはルールにしたがって画像の URL を生成（例えばこの記事のサムネイル）：https://cdn.jsdelivr.net/gh/sjulianryo/blogPics/blogImg/thumb-4-fonts.jpg (解説)https://cdn.jsdelivr.net/gh/（ここまで固定） + {github_username} / {repository_name} / {folder_name}（あれば）/ {file_name} これで jsdelivr の cdn から github のレポジトリにある画像ファイルをブログに出すことができるようになった。原理はなんとなく想像できるが、詳しいことは気力があれば調べる…長く使い続けられると良いね！ Google AnalyticsHueman がデフォルトで設定の場所を用意してくれたので、単純に themes/hueman/_config.yml に ID を記載して終わり Blog を書くのに最低限の設定はこんぐらいかなと。あとはゆくゆく思いついたらまた追記していく。例えば Build-pipeline を作ってみて、Browser で Github で編集するだけで記事更新できるようにするとか。いまのところはまず記事をいっぱい書くところだが… References 禾七博客 - jekyll-hexo-hugo 互相遷移時関於永久鏈接的問題(中国語) ChrAlpha 的幻想郷 - jsDelivr | 免費加速図片等網站静態資源(中国語)","categories":[{"name":"Blog","slug":"Blog","permalink":"https://julianblog.com/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","permalink":"https://julianblog.com/categories/Blog/Hexo/"}],"tags":[{"name":"fontend","slug":"fontend","permalink":"https://julianblog.com/tags/fontend/"},{"name":"git","slug":"git","permalink":"https://julianblog.com/tags/git/"},{"name":"cdn","slug":"cdn","permalink":"https://julianblog.com/tags/cdn/"},{"name":"fonts","slug":"fonts","permalink":"https://julianblog.com/tags/fonts/"}]},{"title":"Github + Hexo でブログのメモ(2)","slug":"github-hexo-notes-2","date":"2020-03-06T15:07:44.000Z","updated":"2020-07-15T15:59:28.746Z","comments":true,"path":"2020/03/07/github-hexo-notes-2/","link":"","permalink":"https://julianblog.com/2020/03/07/github-hexo-notes-2/","excerpt":"","text":"ここでこだわりすぎると疲れてあきらめやすいので、自分みたいな根性のないやつやめんどくさがり屋は要注意！ Theme &amp; git submoduleそのままデフォルトの Landscape で行くのも素晴らしいと思うが、やはりいろいろこだわりたくて。 https://hexo.io/themes/ 公式のテーマページで色々探った結果、hexo-theme-human が一番良いと感じてこれにした。最近結構チェックしているマナブさんのスタイルにも似てて簡潔で写真もあって、多分そのうち飽きるけどとりあえずこれで。（もちろん本当は自分で作るのが一番だが…） Theme importblog フォルダの中の themes フォルダに、テーマのレポジトリを入れれば言い話だが、いろいろバージョンアップしてくれたときの同期とかを考えると、やはり git submodule で管理したほうが便利かと。もっと便利なやり方が見つかったらまた変える。 テーマによってはテーマフォルダにある _config.yml をいじることなく、blog フォルダでレンダリングするやり方もあるらしいけど、今回使う hueman テーマはどうやら _config.yml を自分で作るやり方なので、一回フォークして自分の github に入れていろいろ変更していく管理にした。 github repository の Fork の説明 フォークできたら実際に自分の blog に入れる command-line1234$ cd myblog$ git submodule add https://github.com/&#123;your.username&#125;/hexo-theme-hueman.git themes/hueman$ cd themes/hueman$ cp _config.yml.example _config.yml hueman テーマは先に themes/hueman フォルダにある_config.yml.example をコピーする必要があるもちろん File explorer や Finder でやっても OK。 あとは myblog にある _config.yml のテーマ設定を変更 _config_yml1234567...# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/# theme: landscapetheme: hueman... これで一回 hexo s で効果をみて、テーマが変わったら完成。 submodule の管理(upstream 同期)submodule のコミットとプッシュはメインレポジトリで--recursive コマンドでいろいろできる みたいけど、頭わるい(歳もとった)から個別でいろいろやっている command-line123456$ git clone https://github.com/&#123;username&#125;/&#123;username&#125;.github.io.git$ cd &#123;username&#125;.github.io.git$ git submodule init$ git submodule update$ cd myblog/themes/hueman$ git checkout master # or 使っている branch あとは themes/hueman を別の Git レポジトリで管理すれば良い（ブランチ変更とか、コミットプッシュとか）毎回 checkout しないといけないのはちょっとめんどいけど… そしてテーマの作者がいろいろアップデートしてくれて取り入れたいときはどうも upstream というのを取り入れてマージする感じらしい command-line123456789101112$ git remote add upstream git://github.com/ppoffice/hexo-theme-hueman.git$ git branch -a* master remotes/origin/HEAD -&gt; origin/master remotes/origin/gh-pages remotes/origin/hexo-2.x remotes/origin/master remotes/origin/site remotes/upstream/gh-pages remotes/upstream/hexo-2.x remotes/upstream/master remotes/upstream/site たぶんこんな感じになったら upstream としてオリジナルのテーマレポジトリをリンクしているアップデートの内容を取り入れたいときはそれをマージする command-line123$ git fetch upstream$ git checkout master$ git merge upstream/master Conflict しないようにカスタマイズのときはいろいろ気をつけましょう！ References GitHubでFork/cloneしたリポジトリを本家リポジトリに追従する 一番わかりやすくてとても助かった！","categories":[{"name":"Blog","slug":"Blog","permalink":"https://julianblog.com/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","permalink":"https://julianblog.com/categories/Blog/Hexo/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://julianblog.com/tags/nodejs/"},{"name":"fontend","slug":"fontend","permalink":"https://julianblog.com/tags/fontend/"},{"name":"git","slug":"git","permalink":"https://julianblog.com/tags/git/"}]},{"title":"Github + Hexo でブログのメモ(1)","slug":"githubpage-hexo-notes","date":"2020-03-04T15:18:35.000Z","updated":"2020-07-15T15:59:28.746Z","comments":true,"path":"2020/03/05/githubpage-hexo-notes/","link":"","permalink":"https://julianblog.com/2020/03/05/githubpage-hexo-notes/","excerpt":"","text":"一応公式サイトも貼っとく。 https://pages.github.com/https://hexo.io/ Hexo InstallationNode.js、hexo-cli 環境構築Windows は素直に msi を落として インストールか、choco install nodejs-lts か。Mac の場合は brew で、nodebrew を使ってもいいし。 その場で検索すればすぐ出てくる。 できたら hexo-cli を入れる command-line1$ npm install hexo-cli -g hexo だけ叩いて説明が表示されたら OK でしょう。 Visual Studio Code の Remote-Container を使う場合 Remote-Container の使い方は公式マニュアルDeveloping inside a Container でチェック。 macOS のユーザフォルダに変な .xxx の隠れフォルダがいっぱいできるのいやだというやや潔癖症(?)的な理由で検索して見つけたけど、使ってみたらわりと便利。ただし、性能の良いマシンが必要、配置ファイルもちょこちょこ手入れがいるからだるさはある。わいみたいな会社＋家で 10 台近くマシン持っている人にとっては必須かも？ 前まではコンテナを動かしながら Port Forward できたが、最近もう一回やてみたらメニューが消えてしまった(おれだけ?)ので、devcontainer.json で指定する必要がある。 devcontainer.json123...\"forwardPorts\": [4000],... Git 初期化{username}.github.io でレポジトリ作ってしばらく待てればGithub Page が見れるようになる。デフォルトで表示されるのは master ブランチの中身。Hexo の設定ファイルとかは Hexo ブランチで持ち、hexo-deployer-gitで master ブランチでやるのが一番自分的には楽かな。Travis CI 組んでいる人もいるでしょうけどまだ良さがわからないのでいまのところはこれで。 hexo ブランチを作るからブログの初期化まで command-line123456$ git branch hexo$ git switch hexo$ hexo init myblog #ここの名前はフォルダ名になる$ cd myblog$ npm install$ npm install hexo-deployer-git -s hexo sを叩いて、http://localhost:4000が開けば OK。 hexo-deployer-git でデプロイしてみるブログフォルダにある _config.yml の中のデプロイ方式を設定 _config.yml12345678…# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/&#123;username&#125;/&#123;username&#125;.github.io #使われるレポジトリ branch: master… 編集終わったら hexo d で試してみる。 エラーが出てなく、しばらく時間おけばhttps://{username}.github.io にリリースされているはず。","categories":[{"name":"Blog","slug":"Blog","permalink":"https://julianblog.com/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","permalink":"https://julianblog.com/categories/Blog/Hexo/"}],"tags":[{"name":"nodejs","slug":"nodejs","permalink":"https://julianblog.com/tags/nodejs/"},{"name":"fontend","slug":"fontend","permalink":"https://julianblog.com/tags/fontend/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-03T01:24:00.000Z","updated":"2020-07-15T15:59:28.746Z","comments":true,"path":"2020/03/03/hello-world/","link":"","permalink":"https://julianblog.com/2020/03/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Blog","slug":"Blog","permalink":"https://julianblog.com/categories/Blog/"},{"name":"Hexo","slug":"Blog/Hexo","permalink":"https://julianblog.com/categories/Blog/Hexo/"}],"tags":[]}]}